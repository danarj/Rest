package org.bill.android.myapplication.membershipService;


//----------------------------------------------------
//
// Generated by www.easywsdl.com
// Version: 4.5.7.1
//
// Created by Quasar Development at 27/06/2016
//
//---------------------------------------------------


import org.ksoap2.HeaderProperty;
import org.ksoap2.serialization.*;
import org.ksoap2.transport.*;
import org.kxml2.kdom.Element;

import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class RIVBasicHttpBinding_IMembershipService {
    interface RIVIWcfMethod {
        RIVExtendedSoapSerializationEnvelope CreateSoapEnvelope() throws java.lang.Exception;

        java.lang.Object ProcessResult(RIVExtendedSoapSerializationEnvelope __envelope, java.lang.Object result) throws java.lang.Exception;
    }

    String url = "http://90.1.1.101/ResturantService/MembershipService.svc";

    int timeOut = 60000;
    public List<HeaderProperty> httpHeaders;
    public boolean enableLogging;

    RIVIServiceEvents callback;

    public RIVBasicHttpBinding_IMembershipService() {
    }

    public RIVBasicHttpBinding_IMembershipService(RIVIServiceEvents callback) {
        this.callback = callback;
    }

    public RIVBasicHttpBinding_IMembershipService(RIVIServiceEvents callback, String url) {
        this.callback = callback;
        this.url = url;
    }

    public RIVBasicHttpBinding_IMembershipService(RIVIServiceEvents callback, String url, int timeOut) {
        this.callback = callback;
        this.url = url;
        this.timeOut = timeOut;
    }

    protected org.ksoap2.transport.Transport createTransport() {
        try {
            java.net.URI uri = new java.net.URI(url);
            if (uri.getScheme().equalsIgnoreCase("https")) {
                int port = uri.getPort() > 0 ? uri.getPort() : 443;
                return new HttpsTransportSE(uri.getHost(), port, uri.getPath(), timeOut);
            }
            else {
                return new HttpTransportSE(url, timeOut);
            }

        } catch (java.net.URISyntaxException e) {
        }
        return null;
    }

    protected RIVExtendedSoapSerializationEnvelope createEnvelope() {
        RIVExtendedSoapSerializationEnvelope envelope = new RIVExtendedSoapSerializationEnvelope(RIVExtendedSoapSerializationEnvelope.VER11);
        return envelope;
    }

    protected java.util.List sendRequest(String methodName, RIVExtendedSoapSerializationEnvelope envelope, org.ksoap2.transport.Transport transport) throws java.lang.Exception {
        return transport.call(methodName, envelope, httpHeaders);
    }

    java.lang.Object getResult(java.lang.Class destObj, java.lang.Object source, String resultName, RIVExtendedSoapSerializationEnvelope __envelope) throws java.lang.Exception {
        if (source == null) {
            return null;
        }
        if (source instanceof SoapPrimitive) {
            SoapPrimitive soap = (SoapPrimitive) source;
            if (soap.getName().equals(resultName)) {
                java.lang.Object instance = __envelope.get(source, destObj);
                return instance;
            }
        }
        else {
            SoapObject soap = (SoapObject) source;
            if (soap.hasProperty(resultName)) {
                java.lang.Object j = soap.getProperty(resultName);
                if (j == null) {
                    return null;
                }
                java.lang.Object instance = __envelope.get(j, destObj);
                return instance;
            }
            else if (soap.getName().equals(resultName)) {
                java.lang.Object instance = __envelope.get(source, destObj);
                return instance;
            }
        }

        return null;
    }


    public RIVAuthenticateUserResult AuthenticateUser(final RIVRequestHeader Authentication) throws java.lang.Exception {
        return (RIVAuthenticateUserResult) execute(new RIVIWcfMethod() {
            @Override
            public RIVExtendedSoapSerializationEnvelope CreateSoapEnvelope() {
                RIVExtendedSoapSerializationEnvelope __envelope = createEnvelope();
                ArrayList<org.kxml2.kdom.Element> __headers = null;
                if (__envelope.headerOut == null) {
                    __headers = new ArrayList<org.kxml2.kdom.Element>();
                }
                else {
                    __headers = new ArrayList<org.kxml2.kdom.Element>(Arrays.asList(__envelope.headerOut));
                }
                __headers.add(RIVHelper.convertToHeader(Authentication != null ? Authentication : SoapPrimitive.NullNilElement, "http://tempuri.org/", "Authentication"));
                __envelope.headerOut = __headers.toArray(new Element[__headers.size()]);
                SoapObject __soapReq = new SoapObject("http://tempuri.org/", "AuthenticateUserRequest");
                __envelope.setOutputSoapObject(__soapReq);

                PropertyInfo __info = null;
                return __envelope;
            }

            @Override
            public java.lang.Object ProcessResult(RIVExtendedSoapSerializationEnvelope __envelope, java.lang.Object __result) throws java.lang.Exception {
                return (RIVAuthenticateUserResult) getResult(RIVAuthenticateUserResult.class, __result, "AuthenticateUserResult", __envelope);
            }
        }, "http://tempuri.org/IMembershipService/AuthenticateUser");
    }

    public android.os.AsyncTask<Void, Void, RIVOperationResult<RIVAuthenticateUserResult>> AuthenticateUserAsync(final RIVRequestHeader Authentication) {
        return executeAsync(new RIVFunctions.IFunc<RIVAuthenticateUserResult>() {
            public RIVAuthenticateUserResult Func() throws java.lang.Exception {
                return AuthenticateUser(Authentication);
            }
        });
    }


    protected java.lang.Object execute(RIVIWcfMethod wcfMethod, String methodName) throws java.lang.Exception {
        org.ksoap2.transport.Transport __httpTransport = createTransport();
        __httpTransport.debug = enableLogging;
        RIVExtendedSoapSerializationEnvelope __envelope = wcfMethod.CreateSoapEnvelope();
        try {
            sendRequest(methodName, __envelope, __httpTransport);

        } finally {
            if (__httpTransport.debug) {
                if (__httpTransport.requestDump != null) {
                    android.util.Log.i("requestDump", __httpTransport.requestDump);

                }
                if (__httpTransport.responseDump != null) {
                    android.util.Log.i("responseDump", __httpTransport.responseDump);
                }
            }
        }
        java.lang.Object __retObj = __envelope.bodyIn;
        if (__retObj instanceof org.ksoap2.SoapFault) {
            org.ksoap2.SoapFault __fault = (org.ksoap2.SoapFault) __retObj;
            throw convertToException(__fault, __envelope);
        }
        else {
            return wcfMethod.ProcessResult(__envelope, __retObj);
        }
    }

    protected <T> android.os.AsyncTask<Void, Void, RIVOperationResult<T>> executeAsync(final RIVFunctions.IFunc<T> func) {
        return new android.os.AsyncTask<Void, Void, RIVOperationResult<T>>() {
            @Override
            protected void onPreExecute() {
                callback.Starting();
            }

            ;

            @Override
            protected RIVOperationResult<T> doInBackground(Void... params) {
                RIVOperationResult<T> result = new RIVOperationResult<T>();
                try {
                    result.Result = func.Func();
                } catch (java.lang.Exception ex) {
                    ex.printStackTrace();
                    result.Exception = ex;
                }
                return result;
            }

            @Override
            protected void onPostExecute(RIVOperationResult<T> result) {
                callback.Completed(result);
            }
        }.execute();
    }

    java.lang.Exception convertToException(org.ksoap2.SoapFault fault, RIVExtendedSoapSerializationEnvelope envelope) {

        return new java.lang.Exception(fault.faultstring);
    }
}


